openapi: 3.0.0
info:
  version: 0.0.1
  title: Swagger Cond Vagas Garagem - OpenAPI
  description: Aplicação que determina as vagas de garagem para um condominio.
  termsOfService: http://swagger.io/terms/
  contact:
    email: fmaiati@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://condvagas.swagger.io/api/v3
tags:
  - name: vagas
    description: Vagas de Garagem
  - name: moradores
    description: Moradores
  - name: veiculos
    description: Veículos
paths:
  /vagas/{vagaId}:
    get:
      tags:
        - "vagas"
      summary: "Encontra vaga por Id"
      description: "Retorna uma vaga simples"
      operationId: "getVagaById"
      parameters:
        - name: "vagaId"
          in: "path"
          description: "Id de uma vaga para retornar"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '200':
          description: "Operação com sucesso"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VagaDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/VagaDto'
        '400':
          description: Id invalido procurado
        '404':
          description: Vaga não encontrada
      security:
        - api_key: []
        - vaga_auth:
            - "write:vagas"
            - "read:vagas"
    put:
      tags:
        - "vagas"
      summary: "Alterar vaga por Id"
      description: "Alterar vaga por Id"
      operationId: "updateVagaById"
      parameters:
        - name: "vagaId"
          in: "path"
          description: "Id de uma vaga para retornar"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "Objeto Vaga que precisa ser alterado"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VagaDto"
      responses:
        '204':
          description: "Operação com sucesso"
        '400':
          description: "Vaga inválida"
        '404':
          description: "Vaga não encontrada"
      security:
        - api_key: []
        - vaga_auth:
            - "write:vagas"
            - "read:vagas"
    delete:
      tags:
        - "vagas"
      summary: "Deletar vaga por Id"
      description: "Deletar vaga por Id"
      operationId: "deleteVagaById"
      parameters:
        - name: "vagaId"
          in: "path"
          description: "O id fora deletado"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '204':
          description: "Operação com sucesso"
        '400':
          description: "Id de vaga invalido"
        '404':
          description: "Vaga não encontrada"
      security:
        - api_key: []
        - vaga_auth:
            - "write:vagas"
            - "read:vagas"
  /vagas:
    post:
      tags:
        - "vagas"
      summary: "Adiciona uma nova vaga"
      description: "Adiciona uma nova vaga"
      operationId: "addVaga"
      requestBody:
        description: "Objeto Vaga que precisa ser adicionado"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VagaDto"
      responses:
        '201':
          description: "Operação com sucesso"
        '405':
          description: "Entrada invalida"
      security:
        - api_key: []
        - vaga_auth:
            - "write:vagas"
            - "read:vagas"
  /moradores/{moradorId}:
    get:
      tags:
        - "moradores"
      summary: "Encontra morador por Id"
      description: "Retorna um morador simples"
      operationId: "getMoradorById"
      parameters:
        - name: "moradorId"
          in: "path"
          description: "Id de um morador para retornar"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '200':
          description: "Operação com sucesso"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MoradorDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/MoradorDto'
        '400':
          description: Id procurado invalido
        '404':
          description: Morador não encontrado
      security:
        - api_key: []
        - vaga_auth:
            - "write:moradores"
            - "read:moradores"
    put:
      tags:
        - "moradores"
      summary: "Alterar morador por Id"
      description: "Alterar morador por Id"
      operationId: "updateMoradorById"
      parameters:
        - name: "moradorId"
          in: "path"
          description: "Id de um morador para retornar"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "Objeto Morador que precisa ser alterado"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoradorDto"
      responses:
        '204':
          description: "Operação com sucesso"
        '400':
          description: "Morador inválido"
        '404':
          description: "Morador não encontrado"
      security:
        - api_key: []
        - vaga_auth:
            - "write:moradores"
            - "read:moradores"
    delete:
      tags:
        - "moradores"
      summary: "Deletar morador por Id"
      description: "Deletar morador por Id"
      operationId: "deleteMoradorById"
      parameters:
        - name: "moradorId"
          in: "path"
          description: "Objeto Morador que precisa ser deletado"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '204':
          description: "Operação com sucesso"
        '400':
          description: "Id de vaga invalido"
        '404':
          description: "Vaga não encontrada"
      security:
        - api_key: []
        - vaga_auth:
            - "write:moradores"
            - "read:moradores"
  /moradores:
    post:
      tags:
        - "moradores"
      summary: "Adiciona um novo morador"
      description: "Adiciona um novo morador"
      operationId: "addMorador"
      requestBody:
        description: "Objeto Morador que precisa ser adicionado"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoradorDto"
      responses:
        '201':
          description: "Operação com sucesso"
        '405':
          description: "Entrada invalida"
      security:
        - api_key: []
        - vaga_auth:
            - "write:moradores"
            - "read:moradores"
  /veiculos:
    post:
      tags:
        - "veiculos"
      summary: "Adiciona um veículo"
      description: "Adiciona um veículo"
      operationId: "addVeiculo"
      requestBody:
        description: "Objeto Veículo que precisa ser adicionado"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VeiculoDto"
      responses:
        '201':
          description: "Operação com sucesso"
        '405':
          description: "Entrada invalida"
      security:
        - api_key: [ ]
        - vaga_auth:
            - "write:veiculos"
            - "read:veiculos"
  /veiculos/{veiculoId}:
    get:
      tags:
        - "veiculos"
      summary: "Encontrar veículo por Id"
      description: "Retorna um veículo simples"
      operationId: "getVeiculoById"
      parameters:
        - name: "veiculoId"
          in: "path"
          description: "Id de um veículo para retornar"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '200':
          description: "Operação com sucesso"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VeiculoDto'
            application/xml:
              schema:
                $ref: '#/components/schemas/VeiculoDto'
        '400':
          description: Id invalido procurado
        '404':
          description: Veículo não encontrado
      security:
        - api_key: [ ]
        - vaga_auth:
            - "write:veiculos"
            - "read:veiculos"
    put:
      tags:
        - "veiculos"
      summary: "Alterar veículo por Id"
      description: "Alterar veículo por Id"
      operationId: "updateVeiculoById"
      parameters:
        - name: "veiculoId"
          in: "path"
          description: "Id de um veículo para retornar"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        description: "Objeto Veículo que precisa ser alterado"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VeiculoDto"
      responses:
        '204':
          description: "Operação com sucesso"
        '400':
          description: "Veículo invalido"
        '404':
          description: "Veículo não encontrado"
      security:
        - api_key: [ ]
        - vaga_auth:
            - "write:veiculos"
            - "read:veiculos"
    delete:
      tags:
        - "veiculos"
      summary: "Deletar veiculo por Id"
      description: "Deletar veiculo por Id"
      operationId: "deleteVeiculoById"
      parameters:
        - name: "veiculoId"
          in: "path"
          description: "Objeto veículo que precisa ser deletado"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        '204':
          description: "Operação com sucesso"
        '400':
          description: "Id invalido para o veículo"
        '404':
          description: "Veículo não encontrado"
      security:
        - api_key: [ ]
        - vaga_auth:
            - "write:veiculos"
            - "read:veiculos"
components:
  schemas:
    VagaDto:
      required:
        - numeroDaVaga
        - ehAlugada
        - moradorId
      type: object
      properties:
        numeroDaVaga:
          type: string
          example: c220
          description: codigo da vaga de garagem
        ehAlugada:
          type: boolean
          description: campo lógico que determina se a vaga é alugada ou não
        moradorQueAlugou:
          type: integer
          format: int64
          description: código do morador que alugou a vaga
        moradorId:
          type: integer
          format: int64
          description: código do morador que possui a vaga
        veiculoId:
          type: integer
          format: int64
          description: código do veiculo que utiliza a vaga
    MoradorDto:
      required:
        - nomeDoMorador
        - apartamento
        - bloco
      type: object
      properties:
        nomeDoMorador:
          type: string
          example: João
          description: nome do morador
        apartamento:
          type: string
          example: 34
          description: apartamento do morador
        bloco:
          type: string
          example: Bloco D
          description: bloco do morador
    VeiculoDto:
      required:
        - placaDoVeiculo
        - marcaDoVeiculo
        - corDoVeiculo
        - moradorId
        - vagaDeGaragemId
      type: object
      properties:
        placaDoVeiculo:
          type: string
          example: CV2020
          description: placa do veículo
        marcaDoVeiculo:
          type: string
          example: fiat
          description: marca do veículo
        corDoVeiculo:
          type: string
          example: azul
          description: cor do veículo
        moradorId:
          type: integer
          example: 1
          description: morador id
        vagaDeGaragemId:
          type: integer
          example: 1
          description: vaga de garagem id
  securitySchemes:
    vaga_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://condvagas.swagger.io/oauth/authorize
          scopes:
            write:vagas: modify vagas in your account
            read:vagas: read your vagas
            write:moradores: modify moradores in your account
            read:moradores: read your moradores
    api_key:
      type: apiKey
      name: api_key
      in: header